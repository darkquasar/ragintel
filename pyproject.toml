[tool]
[tool.poetry]
name = "ragintel"
version = "0.1.1"
homepage = "https://github.com/darkquasar/ragintel"
description = "Repo for testing new hunt and intel ideas with RAG."
keywords = ["intel", "threat-intel", "threat-hunting", "rag", "hunt-package", "hunt-pipeline", "hunt", "mitre", "mitre-attack", "mitre-attack-techniques", "mitre-attack-tactics", "mitre-attack-groups", "mitre-attack-software", "mitre-attack-matrices"]
authors = ["Diego Perez <darkquasar7@gmail.com>"]
readme = "README.md"
license =  "BSD-3-Clause"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: BSD License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13'
]

packages = [
    { include = "ragintel", from="src" },
    { include = "tests", format = "sdist" }
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
ragintel = 'ragintel.cli:main'

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
click = "^8.1.7"
pdfplumber = "^0.10.3"
docx = "^0.2.4"
bs4 = "^0.0.1"
types-beautifulsoup4 = "^4.12.0.7"
playwright = "^1.40.0"
html2text = "^2020.1.16"
types-requests = ">=2.31.0.20240106"
pyyaml = ">=6.0.1"
python-box = ">=7.1.1"
loguru = ">=0.7.2"
pandas = "^2.2.0"
transformers = "^4.37.0"
unstructured = {extras = ["csv", "docx", "github", "msg", "pdf", "pptx", "tsv", "xlsx", "yaml"], version = ">=0.12.2"}
stix2 = "^3.0.1"
gitpython = "^3.1.41"
chromadb = ">=0.4.22,<0.5.0"
kuzu = "^0.6.0"
python-magic = "^0.4.27"
python-magic-bin = "^0.4.14"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
jupyter = ">=1.0.0"
pytest = ">=8.0.0,<9.0.0"
pytest-cov = ">=4.1.0"
tox = ">=3.27.1"
mkdocs = ">=1.5.3"
mkdocs-include-markdown-plugin = ">=6.0.4"
mkdocs-material = ">=9.5.2"
mkdocstrings = ">=0.18.0"
mkdocs-material-extensions = ">=1.3.1"
twine = ">=4.0.2"
mkdocs-autorefs = ">=0.3.1"
pre-commit = ">=3.6.0"
toml = ">=0.10.2"
livereload = ">=2.6.3"
mike = ">=2.0.0"
mypy = ">=1.7.1"
setuptools = ">=69.0.2"
pkginfo = ">=1.9.6"
virtualenv = ">=20.25.0"
ruff = "^0.6.2"

[tool.poetry.group.langchain]
optional = false

[tool.poetry.group.langchain.dependencies]
tiktoken = "*"
langchain-core = ">=0.1.0, <1.0.0"
langchain = ">=0.0.353, <1.0.0"
openai = ">=1.6.1"
opensearch-py = ">=2.4.2"
langchain-openai = ">=0.0.3"
langchain-huggingface = ">=0.0.3"
sentence-transformers = ">=3.0.1"
langchain-community = ">=0.2.12"
nltk = ">=3.9"
langchain-ollama = "^0.1.1"
langchain-google-genai = "^1.0.10"
crewai = "^0.51.1"
crewai-tools = "^0.8.3"
google-generativeai = "^0.7.2"
langgraph = "^0.2.14"
langchain-chroma = "^0.1.3"

[tool.pylint]
py-version = "3.12.5"

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.messages_control]
disable = [
  "design",
  "fixme",
  "imports",
  "line-too-long",
  "imports",
  "invalid-name",
  "protected-access",
  "missing-module-docstring",
]


[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src"]
exclude = []

[tool.ruff.lint]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
  "PTH123", # use pathlib instead of builtin open
  "PLC1901", # simply not always correct
  "ARG002", # unused arguments
  "ISC001", # implicit string concatenation
]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-quotes]
avoid-escape = true

[tool.ruff.lint.isort]
required-imports = ["from loguru import logger"]


[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"bench/**" = ["T20"]
"_custom_build/backend.py" = ["T20"]
"setup.py" = ["T20"]
"**/**.eggs" = ["ALL"]
".git/**" = ["ALL"]
".hg/**" = ["ALL"]
".mypy_cache/**" = ["ALL"]
".tox/**" = ["ALL"]
".venv/**" = ["ALL"]
"_build/**" = ["ALL"]
"buck-out/**" = ["ALL"]
"build/**" = ["ALL"]
"dist/**" = ["ALL"]
".history/**" = ["ALL"]
"legacy/**" = ["ALL"]
"mitre_tram.py" = ["ALL"] # temporarily ignore since it may be deprecated
"cli.py" = ["ALL"] # temporarily ignore since it may be deprecated

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "native"
docstring-code-format = true
